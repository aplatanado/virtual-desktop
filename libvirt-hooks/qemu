#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" Libvirt hook script to setup the system before launch a virtual desktop
"""

__author__ = 'Jes√∫s Torres <jmtorres@ull.es>'

import os
import sys
import subprocess
import libvirt
import xml.etree.ElementTree as et


def vfio_bind(device_ids):
    """Bind the specified devices to the Linux VFIO driver

    :param device_ids: List of devices to bind to VFIO.
    """

    modprobe_first_time = True
    for id in device_ids:

        device_sys_path = '/sys/bus/pci/devices/%s/' % id
        with open(device_sys_path + 'vendor', 'r') as f:
            vendor = f.read()
        with open(device_sys_path + 'device', 'r') as f:
            device = f.read()
        try:
            driver = os.path.basename(os.readlink(device_sys_path + 'driver'))
        except OSError:
            driver = None

        if driver != 'vfio-pci':

            # If necessary, load vfio-pci module
            if modprobe_first_time:
                subprocess.check_call(['modprobe', 'vfio-pci'])
                modprobe_first_time = False

            # Unbind the device if it is bound to other driver
            if driver:
                with open(device_sys_path + 'driver/unbind', 'w') as f:
                    f.write(id)

            # Bind the device to VFIO driver
            with open('/sys/bus/pci/drivers/vfio-pci/new_id', 'w') as f:
                f.write("%s %s" % (vendor, device))


class LibvirtHooks(object):
    """Libvirt hook script class
    """

    def run(self, *args):
        """Dispatch the request to the proper method, if it exist

        :param hook_script: Hook script name (e.g. daemon, qemu, lxc or network).
        :param item_name: Guest or network name.
        :param action: Why the hook script was invoked.
        :param subaction: Specific sub-action inside the action.
        :param extraarg: Action-specific extra argument.
        """

        hook_script = os.path.basename(args[0])

        if len(args) < 5:
            sys.exit('%s: invalid number of arguments. This script must be invoked by libvirt as a hook script.' %
                     hook_script)

        item_name, action = args[1:3]

        # First, try to call self.do_script_name_action(subaction, extraarg)
        if item_name != '-':
            try:
                method_name = "do_%s_%s_%s" % (hook_script, item_name, action)
                method_to_call = getattr(self, method_name)
            except AttributeError:
                pass
            else:
                method_to_call(*args[3:5])
                return

        # If the previous attempt fail, try to call self.do_script_action(item_name, subaction, extraarg)
        try:
            method_name = "do_%s_%s" % (hook_script, action)
            method_to_call = getattr(self, method_name)
        except AttributeError:
            pass
        else:
            method_to_call(item_name, *args[3:5])

    def do_qemu_hoth_prepare(self, subaction, extrarg):
        """Prepare the start of Hoth, a Qemu virtual machine
        """

        xml = et.parse(sys.stdin)

        # Get PCI devices to passthrough
        device_ids = []
        for address in xml.findall("devices/hostdev[@type='pci']/source/address"):
            attribs = dict([(k, int(v, 16)) for k, v in address.attrib.iteritems()])
            device_ids.append('{domain:04x}:{bus:02x}:{slot:02x}.{function:x}'.format(**attribs))

        # Bind those devices to VFIO driver
        if device_ids:
            vfio_bind(device_ids)

        # Get the libvirt networks where the VM is connected
        networks = []
        for source in xml.findall("devices/interface[@type='network']/source"):
            networks.append(source.get('network'))

        # Start those networks
        if networks:
            libvirt_conn = libvirt.open('qemu:///system')
            for name in networks:
                network = libvirt_conn.networkLookupByName(name)
                if not network.isActive():
                    network.create()


if __name__ == "__main__":
    libvirt_hook = LibvirtHooks()
    libvirt_hook.run(*sys.argv)
