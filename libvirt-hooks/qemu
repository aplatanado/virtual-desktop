#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" Libvirt hook script to setup the system before launch a virtual desktop
"""
import os
import sys
import subprocess
import libvirt
import xml.etree.ElementTree

__author__ = 'Jesús Torres'
__copyright__ = "Copyright 2015-2019 Jesús Torres <jmtorres@ull.es>"
__license__ = "BSD"
__contact__ = "<jmtorres@ull.es>"


def format_device_id(**address):
    """Get the device id string from device address fields: domain, bus, slot and function
    """
    address = {field: value if isinstance(value, int) else int(value, 16) for field, value in address.iteritems()}
    return '{domain:04x}:{bus:02x}:{slot:02x}.{function:x}'.format(**address)


def vfio_bind_devices(device_ids):
    """Bind the specified devices to the Linux VFIO driver

    :param device_ids: List of addresses of devices to bind to VFIO.
    :return: Dictionary with information about the device bound.
    """

    vfio_loaded = False
    nvidia_loaded = True

    devices = {}
    for id in device_ids:
        device_path = '/sys/bus/pci/devices/%s' % id
        try:
            device_driver = os.path.basename(os.readlink(device_path + '/driver'))
        except OSError:
            device_driver = None

        # Ignore devices already bound to VFIO driver because the system crashes sometimes after
        # a few bind/unbind cycles
        if device_driver != 'vfio-pci':
            device_info = {
                'path': device_path,
                'driver': device_driver
            }
            with open(device_path + '/vendor', 'r') as f:
                device_info['vendor'] = f.read()
            with open(device_path + '/device', 'r') as f:
                device_info['model'] = f.read()
            devices[id] = device_info
        else:
            vfio_loaded = True

    # Load vfio-pci module, if needed
    if not vfio_loaded and devices:
        subprocess.check_call(['modprobe', 'vfio-pci'])

    for id, device_info in devices.iteritems():
        # Unbind the device if it is bound to other driver
        if device_info['driver'] is not None:

            # Unload the NVIDIA driver instead of unbind the device
            if device_info['driver'] == 'nvidia':

                # Hotplug support of graphics card isn't good. Further, I guess that question 9 applies here:
                # http://vfio.blogspot.com.es/2014/08/vfiovga-faq.html
                # The driver locks the VGA arbiter, freezing the VM on its first access to VGA resources.

                # That shouldn't happen but...
                # https://bbs.archlinux.org/viewtopic.php?pid=1508940#p1508940
                if nvidia_loaded:
                    subprocess.call(['rmmod', 'nvidia_drm'])
                    subprocess.call(['rmmod', 'nvidia_modeset'])
                    subprocess.call(['rmmod', 'nvidia_uvm'])
                    subprocess.check_call(['rmmod', 'nvidia'])
                    nvidia_loaded = False
            else:
                with open(device_info['path'] + '/driver/unbind', 'w') as f:
                    f.write(id)

        # Bind the device to VFIO driver
        with open('/sys/bus/pci/drivers/vfio-pci/new_id', 'w') as f:
            f.write("%s %s" % (device_info['vendor'], device_info['model']))

    return devices


class LibvirtHook(object):
    """Libvirt hook script class
    
    :param object_name: Name of the object (guest, network, etc.) involved in the operation or None
    :param operation: Operation being performed on the object.
    :param sub_operation: Specific sub-operation inside the operation or None.
    :param extra_argument: Operation-specific extra argument or None.
    """
    LIBVIRT_CONNECTION_URI = 'qemu:///system'

    def __init__(self, object_name, operation, sub_operation, extra_argument):
        self.object_name = None if object_name == '-' else object_name
        self.operation = operation
        self.sub_operation = None if sub_operation == '-' else sub_operation
        self.extra_argument = None if extra_argument == '-' else extra_argument

        self._object_description = None
        self._virt_connection = None

    @property
    def object_description(self):
        """xml.etree.ElementTree with the full XML description for the object.
        """
        if self._object_description is None:
            self._object_description = xml.etree.ElementTree.parse(sys.stdin)
        return self._object_description

    @property
    def virt_connection(self):
        """Connection to the libvirt daemon.
        """
        if self._virt_connection is None:
            self._virt_connection = libvirt.open(self.LIBVIRT_CONNECTION_URI)
            if self._virt_connection is None:
                raise RuntimeError("Failed to open connection to '{}'".format(self.LIBVIRT_CONNECTION_URI))
        return self._virt_connection

    def run(self):
        """Dispatch the request to the proper method according to 'object_name' and 'operation'.

        First, it tries to invoque on_{object_name}_{operation}() method. If that fails, it tries to invoque
        on_{operation}() method.
        """
        method_to_call = None

        if self.object_name is not None:
            method_name = "on_{}_{}".format(self.object_name, self.operation)
            method_to_call = getattr(self, method_name, None)

        if method_to_call is None:
            method_name = "on_{}".format(self.operation)
            method_to_call = getattr(self, method_name, None)

        if method_to_call is not None:
            return method_to_call()

    #
    # Hook methods
    #

    def on_hoth_prepare(self):
        """Hook method to 'prepare' the start of a VM named 'hoth'
        """
        # Bind the PCI devices to passthrough to VFIO driver
        device_ids = [
            format_device_id(**address.attrib)
            for address in self.object_description.findall("devices/hostdev[@type='pci']/source/address")
        ]
        vfio_bind_devices(device_ids)

        # Start all the networks where the VM will be connected
        network_names = [
            source.get('network')
            for source in self.object_description.findall("devices/interface[@type='network']/source")
        ]
        for network_name in network_names:
            network = self.virt_connection.networkLookupByName(network_name)
            if network and not network.isActive():
                network.create()


if __name__ == "__main__":
    LibvirtHook(*sys.argv[1:]).run()
