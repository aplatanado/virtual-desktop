#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" Libvirt hook script to setup the system before launch a virtual desktop
"""

__author__ = 'Jesús Torres'
__copyright__ = "Copyright 2015 Jesús Torres <jmtorres@ull.es>"
__license__ = "BSD"
__contact__ = "<jmtorres@ull.es>"

import os
import sys
import subprocess
import libvirt
import xml.etree.ElementTree as et


def vfio_bind_devices(device_ids):
    """Bind the specified devices to the Linux VFIO driver

    :param device_ids: List of addresses of devices to bind to VFIO.
    :return: Dictionary with information about the device bound.
    """

    vfio_loaded = False
    nvidia_loaded = True

    devices = {}
    for id in device_ids:
        device_path = '/sys/bus/pci/devices/%s' % id
        try:
            device_driver = os.path.basename(os.readlink(device_path + '/driver'))
        except OSError:
            device_driver = None

        # Ignore devices already bound to VFIO driver because the system crashes sometimes after
        # a few bind/unbind cycles
        if device_driver != 'vfio-pci':
            device_info = {
                'path': device_path,
                'driver': device_driver
            }
            with open(device_path + '/vendor', 'r') as f:
                device_info['vendor'] = f.read()
            with open(device_path + '/device', 'r') as f:
                device_info['model'] = f.read()
            devices[id] = device_info
        else:
            vfio_loaded = True

    # Load vfio-pci module, if needed
    if not vfio_loaded and devices:
        subprocess.check_call(['modprobe', 'vfio-pci'])

    for id, device_info in devices.iteritems():
        # Unbind the device if it is bound to other driver
        if device_info['driver'] is not None:

            # Unload the NVIDIA driver instead of unbind the device
            if device_info['driver'] == 'nvidia':

                # Hotplug support of graphics card isn't good. Further, I guess that question 9 applies here:
                # http://vfio.blogspot.com.es/2014/08/vfiovga-faq.html
                # The driver locks the VGA arbiter, freezing the VM on its first access to VGA resources.

                # That shouldn't happen but...
                # https://bbs.archlinux.org/viewtopic.php?pid=1508940#p1508940
                if nvidia_loaded:
                    subprocess.check_call(['rmmod', 'nvidia'])
                    nvidia_loaded = False
            else:
                with open(device_info['path'] + '/driver/unbind', 'w') as f:
                    f.write(id)

        # Bind the device to VFIO driver
        with open('/sys/bus/pci/drivers/vfio-pci/new_id', 'w') as f:
            f.write("%s %s" % (device_info['vendor'], device_info['model']))

    return devices


class LibvirtHooks(object):
    """Libvirt hook script class
    """

    @staticmethod
    def run(*args):
        """Dispatch the request to the proper method, if it exist

        :param hook_script: Hook script name (e.g. daemon, qemu, lxc or network).
        :param item_name: Guest or network name.
        :param action: Why the hook script was invoked.
        :param subaction: Specific sub-action inside the action.
        :param extraarg: Action-specific extra argument.
        """

        hook_script = os.path.basename(args[0])

        if len(args) < 5:
            sys.exit('%s: invalid number of arguments. This script must be invoked by libvirt as a hook script.' %
                     hook_script)

        item_name, action = args[1:3]

        # First, try to call self.do_script_name_action(subaction, extraarg)
        if item_name != '-':
            try:
                method_name = "do_%s_%s_%s" % (hook_script, item_name, action)
                method_to_call = getattr(LibvirtHooks, method_name)
            except AttributeError:
                pass
            else:
                method_to_call(*args[3:5])
                return

        # If the previous attempt fail, try to call self.do_script_action(item_name, subaction, extraarg)
        try:
            method_name = "do_%s_%s" % (hook_script, action)
            method_to_call = getattr(LibvirtHooks, method_name)
        except AttributeError:
            pass
        else:
            method_to_call(item_name, *args[3:5])

    @staticmethod
    def do_qemu_hoth_prepare(subaction, extrarg):
        """Prepare the start of 'hoth', a Qemu virtual desktop
        """

        xml = et.parse(sys.stdin)

        # Get PCI devices to passthrough
        device_ids = []
        for address_element in xml.findall("devices/hostdev[@type='pci']/source/address"):
            address_attrib = dict([(k, int(v, 16)) for k, v in address_element.attrib.iteritems()])
            device_ids.append('{domain:04x}:{bus:02x}:{slot:02x}.{function:x}'.format(**address_attrib))

        # Bind those devices to VFIO driver
        if device_ids:
            vfio_bind_devices(device_ids)

        # Get the libvirt networks where the VM is connected
        networks = []
        for source in xml.findall("devices/interface[@type='network']/source"):
            networks.append(source.get('network'))

        # Start those networks
        if networks:
            libvirt_conn = libvirt.open('qemu:///system')
            for name in networks:
                network = libvirt_conn.networkLookupByName(name)
                if not network.isActive():
                    network.create()


if __name__ == "__main__":
    LibvirtHooks.run(*sys.argv)
